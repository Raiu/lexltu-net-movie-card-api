//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class MovieApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    moviesPOST(body: MovieReqDto | undefined): Promise<Movie> {
        let url_ = this.baseUrl + "/api/Movies";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMoviesPOST(_response);
        });
    }

    protected processMoviesPOST(response: Response): Promise<Movie> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as Movie;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Movie>(null as any);
    }

    /**
     * @return Success
     */
    moviesAll(): Promise<MovieResDto[]> {
        let url_ = this.baseUrl + "/api/Movies";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMoviesAll(_response);
        });
    }

    protected processMoviesAll(response: Response): Promise<MovieResDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as MovieResDto[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MovieResDto[]>(null as any);
    }

    /**
     * @return Success
     */
    moviesGET(id: number): Promise<MovieResDto> {
        let url_ = this.baseUrl + "/api/Movies/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMoviesGET(_response);
        });
    }

    protected processMoviesGET(response: Response): Promise<MovieResDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as MovieResDto;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MovieResDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    moviesPUT(id: number, body: MovieUpdateDto | undefined): Promise<MovieResDetailsDto> {
        let url_ = this.baseUrl + "/api/Movies/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMoviesPUT(_response);
        });
    }

    protected processMoviesPUT(response: Response): Promise<MovieResDetailsDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as MovieResDetailsDto;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MovieResDetailsDto>(null as any);
    }

    /**
     * @return Success
     */
    moviesDELETE(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Movies/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMoviesDELETE(_response);
        });
    }

    protected processMoviesDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    details(id: number): Promise<MovieResDetailsDto> {
        let url_ = this.baseUrl + "/api/Movies/{id}/details";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDetails(_response);
        });
    }

    protected processDetails(response: Response): Promise<MovieResDetailsDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as MovieResDetailsDto;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MovieResDetailsDto>(null as any);
    }
}

export interface Actor {
    id?: number;
    name: string;
    dateOfBirth?: DateOnly;
    movies?: Movie[] | undefined;
}

export interface ActorResponseDto {
    id?: number;
    name: string;
    dateOfBirth?: DateOnly;
}

export interface ContactInformation {
    id?: number;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    directorId?: number;
}

export interface DateOnly {
    year?: number;
    month?: number;
    day?: number;
    dayOfWeek?: DayOfWeek;
    readonly dayOfYear?: number;
    readonly dayNumber?: number;
}

export enum DayOfWeek {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
}

export interface Director {
    id?: number;
    name: string;
    dateOfBirth?: DateOnly;
    contactInformationId?: number;
    contactInformation?: ContactInformation;
    movies?: Movie[] | undefined;
}

export interface DirectorResponseDto {
    id?: number;
    name: string;
    dateOfBirth?: DateOnly;
    email?: string | undefined;
    phoneNumber?: string | undefined;
}

export interface Genre {
    id?: number;
    name: string;
    movies?: Movie[] | undefined;
}

export interface GenreResponseDto {
    id?: number;
    name: string;
}

export interface Movie {
    id?: number;
    title: string;
    description?: string | undefined;
    releaseDate?: DateOnly;
    rating?: number;
    directorId?: number;
    director?: Director;
    actors?: Actor[] | undefined;
    genres?: Genre[] | undefined;
}

export interface MovieReqDto {
    id?: number;
    title: string;
    description?: string | undefined;
    rating?: number;
    releaseDate?: DateOnly;
    directorId?: number;
    actorsId?: number[] | undefined;
    genresId?: number[] | undefined;
}

export interface MovieResDetailsDto {
    id?: number;
    title?: string | undefined;
    description?: string | undefined;
    releaseDate?: DateOnly;
    director?: DirectorResponseDto;
    actors?: ActorResponseDto[] | undefined;
    genres?: GenreResponseDto[] | undefined;
}

export interface MovieResDto {
    id?: number;
    title?: string | undefined;
    description?: string | undefined;
    releaseDate?: DateOnly;
}

export interface MovieUpdateDto {
    id?: number;
    title: string;
    description?: string | undefined;
    rating?: number;
    releaseDate?: DateOnly;
    directorId?: number;
    actorsId?: number[] | undefined;
    genresId?: number[] | undefined;
}

class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}